(defun SETDIFF (set1 set2)
   (COND ( (NULL set1)())
         ( (MEMSET (CAR set1) set2) 
           (SETDIFF (CDR set1) set2)
         )  
         (T (CONS (CAR set1) (SETDIFF (CDR set1) set2)))
   )
)
(defun MAKESET (set1)
   (COND ( (NULL set1)() )
         ( (MEMSET (CAR set1) (CDR set1)) 
           (MAKESET (CDR set1))
         )
         (T (CONS (CAR set1) (MAKESET (CDR set1))))
   )
)
(defun ATOMICLIST (set1)
   (COND ( (NULL set1) (CONS () set1))
         ( (ATOM set1) (LIST set1))
		   ( (NULL (CDR set1)) (ATOMICLIST (CAR set1)))	
         (T (APPEND (ATOMICLIST (CAR set1)) (ATOMICLIST (CDR set1))))
   )
)
(defun COUNTUNIQNONNIL (set1)
	(COND ( (NULL set1) 0)
		  ( (ATOM set1) 1)
	      (T (+ (COUNTUNIQNONNIL (CAR (MAKESET (ATOMICLIST set1))))
				(COUNTUNIQNONNIL (CDR (MAKESET (ATOMICLIST set1))))))
	)
)
(defun MEMSET (atm L)
   (cond ( (NULL L) NIL )
         ( (EQL atm (CAR L)) T )
         ( T (MEMSET atm (CDR L))) 
   )
)

 


